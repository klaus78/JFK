DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return java.lang.Void;

}

ERROR - Cannot compile exception caught while definining a IFunction class 
javassist.CannotCompileException: [source error] no such field: java/lang/Void
	at javassist.CtNewMethod.make(CtNewMethod.java:78)
	at javassist.CtNewMethod.make(CtNewMethod.java:44)
	at javassist.CtMethod.make(CtMethod.java:126)
	at jfk.function.classloaders.ClosureClassLoader.findClass(ClosureClassLoader.java:348)
	at jfk.function.classloaders.ClosureClassLoader.getClosure(ClosureClassLoader.java:486)
	at jfk.function.impl.ClosureBuilderImpl.buildClosure(ClosureBuilderImpl.java:61)
	at jfk.test.ClosureTest.testClosureBuilder(ClosureTest.java:78)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: compile error: no such field: java/lang/Void
	at javassist.compiler.MemberResolver.lookupFieldByJvmName2(MemberResolver.java:269)
	at javassist.compiler.TypeChecker.fieldAccess2(TypeChecker.java:880)
	at javassist.compiler.TypeChecker.fieldAccess(TypeChecker.java:837)
	at javassist.compiler.TypeChecker.atFieldRead(TypeChecker.java:770)
	at javassist.compiler.TypeChecker.atExpr(TypeChecker.java:571)
	at javassist.compiler.ast.Expr.accept(Expr.java:67)
	at javassist.compiler.CodeGen.doTypeCheck(CodeGen.java:241)
	at javassist.compiler.CodeGen.compileExpr(CodeGen.java:228)
	at javassist.compiler.CodeGen.atReturnStmnt2(CodeGen.java:597)
	at javassist.compiler.JvstCodeGen.atReturnStmnt(JvstCodeGen.java:424)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:362)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:350)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atMethodBody(CodeGen.java:291)
	at javassist.compiler.CodeGen.atMethodDecl(CodeGen.java:273)
	at javassist.compiler.ast.MethodDecl.accept(MethodDecl.java:43)
	at javassist.compiler.Javac.compileMethod(Javac.java:168)
	at javassist.compiler.Javac.compile(Javac.java:94)
	at javassist.CtNewMethod.make(CtNewMethod.java:73)
	... 29 more
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return Void;

}

ERROR - Cannot compile exception caught while definining a IFunction class 
javassist.CannotCompileException: [source error] no such field: Void
	at javassist.CtNewMethod.make(CtNewMethod.java:78)
	at javassist.CtNewMethod.make(CtNewMethod.java:44)
	at javassist.CtMethod.make(CtMethod.java:126)
	at jfk.function.classloaders.ClosureClassLoader.findClass(ClosureClassLoader.java:348)
	at jfk.function.classloaders.ClosureClassLoader.getClosure(ClosureClassLoader.java:486)
	at jfk.function.impl.ClosureBuilderImpl.buildClosure(ClosureBuilderImpl.java:61)
	at jfk.test.ClosureTest.testClosureBuilder(ClosureTest.java:78)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: compile error: no such field: Void
	at javassist.compiler.TypeChecker.fieldAccess(TypeChecker.java:812)
	at javassist.compiler.TypeChecker.atFieldRead(TypeChecker.java:770)
	at javassist.compiler.TypeChecker.atMember(TypeChecker.java:952)
	at javassist.compiler.JvstTypeChecker.atMember(JvstTypeChecker.java:65)
	at javassist.compiler.ast.Member.accept(Member.java:38)
	at javassist.compiler.CodeGen.doTypeCheck(CodeGen.java:241)
	at javassist.compiler.CodeGen.compileExpr(CodeGen.java:228)
	at javassist.compiler.CodeGen.atReturnStmnt2(CodeGen.java:597)
	at javassist.compiler.JvstCodeGen.atReturnStmnt(JvstCodeGen.java:424)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:362)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:350)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atMethodBody(CodeGen.java:291)
	at javassist.compiler.CodeGen.atMethodDecl(CodeGen.java:273)
	at javassist.compiler.ast.MethodDecl.accept(MethodDecl.java:43)
	at javassist.compiler.Javac.compileMethod(Javac.java:168)
	at javassist.compiler.Javac.compile(Javac.java:94)
	at javassist.CtNewMethod.make(CtNewMethod.java:73)
	... 29 more
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, int i){ return s + i; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "int") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( int.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.concat((java.lang.String)param0[0], (int)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir.intValue(); } 
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_20.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_20.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_20.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_20.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_20.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_20.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_20.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_20.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new function class name is DummyClass_hello_9
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_14
DEBUG - The new closure class name is Closure_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_14
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_14.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_14) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_14 = (jfk.function.ClosureTargetObject_14) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_16.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_20.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@7f1e1bbf->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  consumeEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get(_jfk_test_EventConsumer)).consumeEvent((java.lang.String)  param0);
}

INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@11afd9cc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  consumeEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget(jfk.function.delegates.IDelegate delegate, String key){
	 this.__targetMap_.put(key,,delegate);
}

INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@11afd9cc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  consumeEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget(jfk.function.delegates.IDelegate delegate, String key){
	 this.__targetMap_.put(key,delegate);
}

DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_15
DEBUG - The new closure class name is Closure_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_15
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_15.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_15) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_15 = (jfk.function.ClosureTargetObject_15) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_17
DEBUG - The new closure class name is Closure_18
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_17
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_17.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_17) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_17 = (jfk.function.ClosureTargetObject_17) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_19
DEBUG - The new closure class name is Closure_20
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_19
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_19.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_19) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_19 = (jfk.function.ClosureTargetObject_19) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_21
DEBUG - The new closure class name is Closure_22
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_21
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_21.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_21) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_21 = (jfk.function.ClosureTargetObject_21) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@7f60c4b0->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  consumeEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget(jfk.function.delegates.IDelegate delegate, String key){
	 this.__targetMap_.put(key,delegate);
}

DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_15
DEBUG - The new closure class name is Closure_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_15
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_15.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_15) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_15 = (jfk.function.ClosureTargetObject_15) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_17
DEBUG - The new closure class name is Closure_18
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_17
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_17.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_17) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_17 = (jfk.function.ClosureTargetObject_17) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_19
DEBUG - The new closure class name is Closure_20
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_19
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_19.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_19) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_19 = (jfk.function.ClosureTargetObject_19) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_21
DEBUG - The new closure class name is Closure_22
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_21
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_21.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_21) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_21 = (jfk.function.ClosureTargetObject_21) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@491cc367->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  consumeEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget(jfk.function.delegates.IDelegate delegate, String key){
	 this.__targetMap_.put(key,delegate);
}

DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_15
DEBUG - The new closure class name is Closure_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_15
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_15.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_15) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_15 = (jfk.function.ClosureTargetObject_15) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_17
DEBUG - The new closure class name is Closure_18
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_17
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_17.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_17) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_17 = (jfk.function.ClosureTargetObject_17) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_19
DEBUG - The new closure class name is Closure_20
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_19
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_19.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_19) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_19 = (jfk.function.ClosureTargetObject_19) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_21
DEBUG - The new closure class name is Closure_22
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_21
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_21.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_21) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_21 = (jfk.function.ClosureTargetObject_21) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@491cc367->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  consumeEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget(jfk.function.delegates.IDelegate delegate, String key){
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_15
DEBUG - The new closure class name is Closure_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_15
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_15.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_15) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_15 = (jfk.function.ClosureTargetObject_15) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_17
DEBUG - The new closure class name is Closure_18
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_17
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_17.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_17) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_17 = (jfk.function.ClosureTargetObject_17) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_19
DEBUG - The new closure class name is Closure_20
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_19
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_19.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_19) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_19 = (jfk.function.ClosureTargetObject_19) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_21
DEBUG - The new closure class name is Closure_22
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_21
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_21.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_21) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_21 = (jfk.function.ClosureTargetObject_21) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@45f8acdc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  consumeEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget(jfk.function.delegates.IDelegate delegate, String key){
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_15
DEBUG - The new closure class name is Closure_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_15
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_15.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_15) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_15 = (jfk.function.ClosureTargetObject_15) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_17
DEBUG - The new closure class name is Closure_18
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_17
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_17.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_17) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_17 = (jfk.function.ClosureTargetObject_17) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_19
DEBUG - The new closure class name is Closure_20
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_19
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_19.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_19) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_19 = (jfk.function.ClosureTargetObject_19) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_21
DEBUG - The new closure class name is Closure_22
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_21
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_21.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_21) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_21 = (jfk.function.ClosureTargetObject_21) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@7f60c4b0->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  consumeEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget(jfk.function.delegates.IDelegate delegate, String key){
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_15
DEBUG - The new closure class name is Closure_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_15
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_15.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_15) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_15 = (jfk.function.ClosureTargetObject_15) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_17
DEBUG - The new closure class name is Closure_18
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_17
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_17.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_17) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_17 = (jfk.function.ClosureTargetObject_17) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_19
DEBUG - The new closure class name is Closure_20
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_19
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_19.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_19) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_19 = (jfk.function.ClosureTargetObject_19) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_21
DEBUG - The new closure class name is Closure_22
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_21
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_21.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_21) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_21 = (jfk.function.ClosureTargetObject_21) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@45f8acdc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  consumeEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
		 this.__targetMap_.put(key,delegate);
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_15
DEBUG - The new closure class name is Closure_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_15
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_15.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_15) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_15 = (jfk.function.ClosureTargetObject_15) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_17
DEBUG - The new closure class name is Closure_18
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_17
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_17.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_17) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_17 = (jfk.function.ClosureTargetObject_17) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_19
DEBUG - The new closure class name is Closure_20
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_19
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_19.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_19) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_19 = (jfk.function.ClosureTargetObject_19) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_21
DEBUG - The new closure class name is Closure_22
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_21
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_21.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_21) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_21 = (jfk.function.ClosureTargetObject_21) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@45f8acdc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  consumeEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_15
DEBUG - The new closure class name is Closure_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_15
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_15.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_15) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_15 = (jfk.function.ClosureTargetObject_15) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_17
DEBUG - The new closure class name is Closure_18
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_17
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_17.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_17) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_17 = (jfk.function.ClosureTargetObject_17) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_19
DEBUG - The new closure class name is Closure_20
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_19
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_19.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_19) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_19 = (jfk.function.ClosureTargetObject_19) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_21
DEBUG - The new closure class name is Closure_22
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_21
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_21.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_21) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_21 = (jfk.function.ClosureTargetObject_21) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@491cc367->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  consumeEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_15
DEBUG - The new closure class name is Closure_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_15
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_15.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_15) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_15 = (jfk.function.ClosureTargetObject_15) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_17
DEBUG - The new closure class name is Closure_18
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_17
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_17.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_17) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_17 = (jfk.function.ClosureTargetObject_17) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_19
DEBUG - The new closure class name is Closure_20
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_19
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_19.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_19) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_19 = (jfk.function.ClosureTargetObject_19) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_21
DEBUG - The new closure class name is Closure_22
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_21
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_21.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_21) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_21 = (jfk.function.ClosureTargetObject_21) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@45f8acdc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  consumeEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_15
DEBUG - The new closure class name is Closure_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_15
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_15.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_15) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_15 = (jfk.function.ClosureTargetObject_15) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_17
DEBUG - The new closure class name is Closure_18
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_17
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_17.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_17) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_17 = (jfk.function.ClosureTargetObject_17) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_19
DEBUG - The new closure class name is Closure_20
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_19
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_19.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_19) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_19 = (jfk.function.ClosureTargetObject_19) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_21
DEBUG - The new closure class name is Closure_22
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_21
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_21.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_21) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_21 = (jfk.function.ClosureTargetObject_21) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@45f8acdc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_15
DEBUG - The new closure class name is Closure_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_15
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_15.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_15) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_15 = (jfk.function.ClosureTargetObject_15) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_17
DEBUG - The new closure class name is Closure_18
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_17
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_17.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_17) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_17 = (jfk.function.ClosureTargetObject_17) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_19
DEBUG - The new closure class name is Closure_20
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_19
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_19.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_19) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_19 = (jfk.function.ClosureTargetObject_19) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_21
DEBUG - The new closure class name is Closure_22
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_21
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_21.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_21) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_21 = (jfk.function.ClosureTargetObject_21) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@491cc367->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_2
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@12746ad0->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_2
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_16.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_18.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_20.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_22.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@45f8acdc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - The new function class name is DummyClass_hello_10
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_15
DEBUG - The new closure class name is Closure_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_15
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_15.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_15) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_15 = (jfk.function.ClosureTargetObject_15) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_17
DEBUG - The new closure class name is Closure_18
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_17
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_17.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_17) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_17 = (jfk.function.ClosureTargetObject_17) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_19
DEBUG - The new closure class name is Closure_20
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_19
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_19.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_19) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_19 = (jfk.function.ClosureTargetObject_19) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_21
DEBUG - The new closure class name is Closure_22
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_21
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_21.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_21) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_21 = (jfk.function.ClosureTargetObject_21) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@491cc367->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_2
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@19108727->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_2
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_16.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_18.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_20.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_22.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@756f70a4->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
:public boolean addDelegate( IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(delegateToAdd);
		 return true;}
	else return false;
}

DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_16.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_18.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_20.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_22.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@5b4bc4e6->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(delegateToAdd);
		 return true;
	}
	else return false;
}

INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@1ac7057c->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(delegateToAdd);
		 return true;
	}
	else return false;
}

INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@21270107->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(delegateToAdd);
		 return true;
	}
	else return false;
}

INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@43ce663c->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(delegateToAdd);
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if(  this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.remove(delegateToAdd);
		 return true;
	}
	else return false;
}

INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@44775121->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(delegateToAdd);
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_3
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@c191e4c->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_4 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.add(delegateToAdd);
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_3
DEBUG - The new function class name is DummyClass_hello_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_20.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_22.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_24
DEBUG - The new closure class name is Closure_25
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_24
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_24.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_24) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_24 = (jfk.function.ClosureTargetObject_24) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@674c5b37->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
		for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++){
			 ((IFunction) _jfk_test_EventGenerator_privateFunctionList_2).executeCall((java.lang.String)  param0););


}

DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_16.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_18.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_20.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_22.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@491cc367->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
	if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
		for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++){
			 ((IFunction) _jfk_test_EventGenerator_privateFunctionList_2).executeCall((java.lang.String)  param0);

catch(jfk.exceptions.JFKException e){ }

 
}

DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_16.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_18.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_20.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_22.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@674c5b37->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
	if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
		for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++){
			 ((IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i)).executeCall((java.lang.String)  param0);

catch(jfk.exceptions.JFKException e){ }

 
}

DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_16.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_18.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_20.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_22.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@45f8acdc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
	if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
		for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++){
			 ((IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i)).executeCall((java.lang.String)  param0);

catch(jfk.exceptions.JFKException e){ }

 
}

INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@45f8acdc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
	if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
		for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++){
			 ((IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i)).executeCall((java.lang.String)  param0);

}catch(jfk.exceptions.JFKException e){ }

 
}

INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@491cc367->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
	if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
		for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++){
			 ((IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i)).executeCall((java.lang.String)  param0);

}catch(jfk.function.exception.JFKException e){ }

 
}

INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@491cc367->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
	if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
		for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++){
			 ((IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i)).executeCall((java.lang.String)  param0);

}catch(Exception e){ }

 
}

INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@45f8acdc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
	if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
		for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++){
			 ((IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i)).executeCall((java.lang.String)  param0);

}catch(Exception e){ }

 
}

DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_16.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_18.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_20.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_22.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@491cc367->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
		for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++){
				 ((IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall((java.lang.String)  param0);

	}catch(Exception e){ }

 
}

DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_16.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_18.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_20.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_22.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@7f60c4b0->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++){
				 ((IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall((java.lang.String)  param0);

	}catch(Exception e){ }

 
}

ERROR - Compilation error!
javassist.CannotCompileException: [source error] syntax error near "

	}catch(Exception "
	at javassist.CtNewMethod.make(CtNewMethod.java:78)
	at javassist.CtNewMethod.make(CtNewMethod.java:44)
	at javassist.CtMethod.make(CtMethod.java:126)
	at jfk.function.classloaders.DelegateClassLoader.findClass(DelegateClassLoader.java:345)
	at jfk.function.classloaders.DelegateClassLoader.createDelegate(DelegateClassLoader.java:142)
	at jfk.function.impl.DelegateManagerImpl.createAndBind(DelegateManagerImpl.java:146)
	at jfk.test.DelegateTest.testDelegateManager(DelegateTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: compile error: syntax error near "

	}catch(Exception "
	at javassist.compiler.Parser.parsePrimaryExpr(Parser.java:1255)
	at javassist.compiler.Parser.parsePostfix(Parser.java:1029)
	at javassist.compiler.Parser.parseUnaryExpr(Parser.java:887)
	at javassist.compiler.Parser.parseBinaryExpr(Parser.java:774)
	at javassist.compiler.Parser.parseConditionalExpr(Parser.java:718)
	at javassist.compiler.Parser.parseExpression(Parser.java:698)
	at javassist.compiler.Parser.parseDeclarationOrExpression(Parser.java:590)
	at javassist.compiler.Parser.parseStatement(Parser.java:276)
	at javassist.compiler.Parser.parseBlock(Parser.java:288)
	at javassist.compiler.Parser.parseTry(Parser.java:472)
	at javassist.compiler.Parser.parseStatement(Parser.java:262)
	at javassist.compiler.Parser.parseBlock(Parser.java:288)
	at javassist.compiler.Parser.parseMethod2(Parser.java:151)
	at javassist.compiler.Javac.compileMethod(Javac.java:148)
	at javassist.compiler.Javac.compile(Javac.java:94)
	at javassist.CtNewMethod.make(CtNewMethod.java:73)
	... 29 more
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_16.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_18.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_20.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_22.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@7f60c4b0->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++)
				 ((IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall((java.lang.String)  param0);

	}catch(Exception e){ }

 
}

ERROR - Compilation error!
javassist.CannotCompileException: [source error] no such class: IFunction
	at javassist.CtNewMethod.make(CtNewMethod.java:78)
	at javassist.CtNewMethod.make(CtNewMethod.java:44)
	at javassist.CtMethod.make(CtMethod.java:126)
	at jfk.function.classloaders.DelegateClassLoader.findClass(DelegateClassLoader.java:345)
	at jfk.function.classloaders.DelegateClassLoader.createDelegate(DelegateClassLoader.java:142)
	at jfk.function.impl.DelegateManagerImpl.createAndBind(DelegateManagerImpl.java:146)
	at jfk.test.DelegateTest.testDelegateManager(DelegateTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: compile error: no such class: IFunction
	at javassist.compiler.MemberResolver.searchImports(MemberResolver.java:416)
	at javassist.compiler.MemberResolver.lookupClass(MemberResolver.java:392)
	at javassist.compiler.MemberResolver.lookupClassByName(MemberResolver.java:306)
	at javassist.compiler.MemberResolver.resolveClassName(MemberResolver.java:450)
	at javassist.compiler.TypeChecker.resolveClassName(TypeChecker.java:131)
	at javassist.compiler.TypeChecker.atCastExpr(TypeChecker.java:545)
	at javassist.compiler.JvstTypeChecker.atCastExpr(JvstTypeChecker.java:103)
	at javassist.compiler.ast.CastExpr.accept(CastExpr.java:54)
	at javassist.compiler.TypeChecker.atCallExpr(TypeChecker.java:653)
	at javassist.compiler.JvstTypeChecker.atCallExpr(JvstTypeChecker.java:156)
	at javassist.compiler.ast.CallExpr.accept(CallExpr.java:45)
	at javassist.compiler.CodeGen.doTypeCheck(CodeGen.java:241)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:329)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atForStmnt(CodeGen.java:479)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:358)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atIfStmnt(CodeGen.java:390)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:354)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:350)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.MemberCodeGen.atTryStmnt(MemberCodeGen.java:203)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:366)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:350)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atMethodBody(CodeGen.java:291)
	at javassist.compiler.CodeGen.atMethodDecl(CodeGen.java:273)
	at javassist.compiler.ast.MethodDecl.accept(MethodDecl.java:43)
	at javassist.compiler.Javac.compileMethod(Javac.java:168)
	at javassist.compiler.Javac.compile(Javac.java:94)
	at javassist.CtNewMethod.make(CtNewMethod.java:73)
	... 29 more
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_16.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_18.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_20.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_22.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@7f60c4b0->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall((java.lang.String)  param0);

	}catch(Exception e){ }

 
}

ERROR - Compilation error!
javassist.CannotCompileException: [source error] executeCall(java.lang.String) not found in jfk.function.IFunction
	at javassist.CtNewMethod.make(CtNewMethod.java:78)
	at javassist.CtNewMethod.make(CtNewMethod.java:44)
	at javassist.CtMethod.make(CtMethod.java:126)
	at jfk.function.classloaders.DelegateClassLoader.findClass(DelegateClassLoader.java:345)
	at jfk.function.classloaders.DelegateClassLoader.createDelegate(DelegateClassLoader.java:142)
	at jfk.function.impl.DelegateManagerImpl.createAndBind(DelegateManagerImpl.java:146)
	at jfk.test.DelegateTest.testDelegateManager(DelegateTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: compile error: executeCall(java.lang.String) not found in jfk.function.IFunction
	at javassist.compiler.TypeChecker.atMethodCallCore(TypeChecker.java:716)
	at javassist.compiler.TypeChecker.atCallExpr(TypeChecker.java:681)
	at javassist.compiler.JvstTypeChecker.atCallExpr(JvstTypeChecker.java:156)
	at javassist.compiler.ast.CallExpr.accept(CallExpr.java:45)
	at javassist.compiler.CodeGen.doTypeCheck(CodeGen.java:241)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:329)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atForStmnt(CodeGen.java:479)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:358)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atIfStmnt(CodeGen.java:390)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:354)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:350)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.MemberCodeGen.atTryStmnt(MemberCodeGen.java:203)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:366)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:350)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atMethodBody(CodeGen.java:291)
	at javassist.compiler.CodeGen.atMethodDecl(CodeGen.java:273)
	at javassist.compiler.ast.MethodDecl.accept(MethodDecl.java:43)
	at javassist.compiler.Javac.compileMethod(Javac.java:168)
	at javassist.compiler.Javac.compile(Javac.java:94)
	at javassist.CtNewMethod.make(CtNewMethod.java:73)
	... 29 more
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_16.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_18.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_20.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_22.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@7f60c4b0->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);(java.lang.String)  param0


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall( new Object[]{(java.lang.String)  param0});

	}catch(Exception e){ }

 
}

ERROR - Compilation error!
javassist.CannotCompileException: [source error] ; is missing
	at javassist.CtNewMethod.make(CtNewMethod.java:78)
	at javassist.CtNewMethod.make(CtNewMethod.java:44)
	at javassist.CtMethod.make(CtMethod.java:126)
	at jfk.function.classloaders.DelegateClassLoader.findClass(DelegateClassLoader.java:349)
	at jfk.function.classloaders.DelegateClassLoader.createDelegate(DelegateClassLoader.java:142)
	at jfk.function.impl.DelegateManagerImpl.createAndBind(DelegateManagerImpl.java:146)
	at jfk.test.DelegateTest.testDelegateManager(DelegateTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: compile error: ; is missing
	at javassist.compiler.Parser.parseDeclarationOrExpression(Parser.java:593)
	at javassist.compiler.Parser.parseStatement(Parser.java:276)
	at javassist.compiler.Parser.parseBlock(Parser.java:288)
	at javassist.compiler.Parser.parseMethod2(Parser.java:151)
	at javassist.compiler.Javac.compileMethod(Javac.java:148)
	at javassist.compiler.Javac.compile(Javac.java:94)
	at javassist.CtNewMethod.make(CtNewMethod.java:73)
	... 29 more
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_16.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_18.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_20.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_22.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@45f8acdc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);(java.lang.String)  param0


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

ERROR - Compilation error!
javassist.CannotCompileException: [source error] ; is missing
	at javassist.CtNewMethod.make(CtNewMethod.java:78)
	at javassist.CtNewMethod.make(CtNewMethod.java:44)
	at javassist.CtMethod.make(CtMethod.java:126)
	at jfk.function.classloaders.DelegateClassLoader.findClass(DelegateClassLoader.java:349)
	at jfk.function.classloaders.DelegateClassLoader.createDelegate(DelegateClassLoader.java:142)
	at jfk.function.impl.DelegateManagerImpl.createAndBind(DelegateManagerImpl.java:146)
	at jfk.test.DelegateTest.testDelegateManager(DelegateTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: compile error: ; is missing
	at javassist.compiler.Parser.parseDeclarationOrExpression(Parser.java:593)
	at javassist.compiler.Parser.parseStatement(Parser.java:276)
	at javassist.compiler.Parser.parseBlock(Parser.java:288)
	at javassist.compiler.Parser.parseMethod2(Parser.java:151)
	at javassist.compiler.Javac.compileMethod(Javac.java:148)
	at javassist.compiler.Javac.compile(Javac.java:94)
	at javassist.CtNewMethod.make(CtNewMethod.java:73)
	... 29 more
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_16.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_18.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_20.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_22.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@45f8acdc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(delegateToAdd);
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_3
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@451415c8->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_4 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_4.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_4.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_4 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.add(delegateToAdd);
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_3
DEBUG - The new function class name is DummyClass_hello_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_20.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_22.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_24
DEBUG - The new closure class name is Closure_25
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_24
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_24.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_24) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_24 = (jfk.function.ClosureTargetObject_24) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@674c5b37->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(delegateToAdd);
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_3
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@c191e4c->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_4 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_4.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_4.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_4 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.add(delegateToAdd);
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_3
DEBUG - The new function class name is DummyClass_hello_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_20.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_22.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_24
DEBUG - The new closure class name is Closure_25
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_24
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_24.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_24) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_24 = (jfk.function.ClosureTargetObject_24) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@674c5b37->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(delegateToAdd);
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_3
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@531df164->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_4 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_4.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_4.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_4 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.add(delegateToAdd);
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_3
DEBUG - The new function class name is DummyClass_hello_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_20.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_22.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_24
DEBUG - The new closure class name is Closure_25
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_24
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_24.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_24) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_24 = (jfk.function.ClosureTargetObject_24) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@491cc367->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(  jfk.core.JFK.getFunctionBuilder().bindFunction("", delegateToAdd )  );
		 return true;
	}
	else return false;
}

ERROR - Compilation error!
javassist.CannotCompileException: [source error] bindFunction(java.lang.String,jfk.function.delegates.IDelegate) not found in jfk.function.IFunctionBuilder
	at javassist.CtNewMethod.make(CtNewMethod.java:78)
	at javassist.CtNewMethod.make(CtNewMethod.java:44)
	at javassist.CtMethod.make(CtMethod.java:126)
	at jfk.function.classloaders.DelegateClassLoader.findClass(DelegateClassLoader.java:414)
	at jfk.function.classloaders.DelegateClassLoader.createDelegate(DelegateClassLoader.java:144)
	at jfk.function.impl.DelegateManagerImpl.createAndBind(DelegateManagerImpl.java:146)
	at jfk.test.DelegateTest.testDelegateManager(DelegateTest.java:82)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: compile error: bindFunction(java.lang.String,jfk.function.delegates.IDelegate) not found in jfk.function.IFunctionBuilder
	at javassist.compiler.TypeChecker.atMethodCallCore(TypeChecker.java:716)
	at javassist.compiler.TypeChecker.atCallExpr(TypeChecker.java:681)
	at javassist.compiler.JvstTypeChecker.atCallExpr(JvstTypeChecker.java:156)
	at javassist.compiler.ast.CallExpr.accept(CallExpr.java:45)
	at javassist.compiler.JvstTypeChecker.atMethodArgs(JvstTypeChecker.java:220)
	at javassist.compiler.TypeChecker.atMethodCallCore(TypeChecker.java:702)
	at javassist.compiler.TypeChecker.atCallExpr(TypeChecker.java:681)
	at javassist.compiler.JvstTypeChecker.atCallExpr(JvstTypeChecker.java:156)
	at javassist.compiler.ast.CallExpr.accept(CallExpr.java:45)
	at javassist.compiler.CodeGen.doTypeCheck(CodeGen.java:241)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:329)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:350)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atIfStmnt(CodeGen.java:390)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:354)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atStmnt(CodeGen.java:350)
	at javassist.compiler.ast.Stmnt.accept(Stmnt.java:49)
	at javassist.compiler.CodeGen.atMethodBody(CodeGen.java:291)
	at javassist.compiler.CodeGen.atMethodDecl(CodeGen.java:273)
	at javassist.compiler.ast.MethodDecl.accept(MethodDecl.java:43)
	at javassist.compiler.Javac.compileMethod(Javac.java:168)
	at javassist.compiler.Javac.compile(Javac.java:94)
	at javassist.CtNewMethod.make(CtNewMethod.java:73)
	... 29 more
DEBUG - The new function class name is DummyClass_hello_11
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_12
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_16
DEBUG - The new closure class name is Closure_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_16
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_16.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_16) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_16 = (jfk.function.ClosureTargetObject_16) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_18.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_20.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_22.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@491cc367->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(  jfk.core.JFK.getFunctionBuilder().bindFunction(delegateToAdd, ""  )  );
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_3
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@52d306dd->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_4 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_4.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_4.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_4 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.add(  jfk.core.JFK.getFunctionBuilder().bindFunction(delegateToAdd, ""  )  );
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_3
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - The new function class name is DummyClass_hello_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_20.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_22.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_24
DEBUG - The new closure class name is Closure_25
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_24
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_24.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_24) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_24 = (jfk.function.ClosureTargetObject_24) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@45f8acdc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd, String name ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(  jfk.core.JFK.getFunctionBuilder().bindFunction(delegateToAdd, name  )  );
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_3
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@29a220e6->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_4 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_4.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_4.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd, String name ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_4 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.add(  jfk.core.JFK.getFunctionBuilder().bindFunction(delegateToAdd, name  )  );
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_3
DEBUG - The new function class name is DummyClass_hello_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_20.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_22.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_24
DEBUG - The new closure class name is Closure_25
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_24
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_24.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_24) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_24 = (jfk.function.ClosureTargetObject_24) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@45f8acdc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd, String name ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(  jfk.core.JFK.getFunctionBuilder().bindFunction(delegateToAdd, name  )  );
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_3
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@451415c8->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_4 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_4.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_4.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd, String name ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_4 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.add(  jfk.core.JFK.getFunctionBuilder().bindFunction(delegateToAdd, name  )  );
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_3
DEBUG - The new function class name is DummyClass_hello_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_20.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_22.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_24
DEBUG - The new closure class name is Closure_25
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_24
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_24.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_24) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_24 = (jfk.function.ClosureTargetObject_24) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@756f70a4->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd, String name ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(  jfk.core.JFK.getFunctionBuilder().bindDelegateFunction(delegateToAdd, name  )  );
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_3
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@52d306dd->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_4 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_4.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_4.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd, String name ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_4 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.add(  jfk.core.JFK.getFunctionBuilder().bindDelegateFunction(delegateToAdd, name  )  );
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_3
DEBUG - The new function class name is DummyClass_hello_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_20.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_22.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_24
DEBUG - The new closure class name is Closure_25
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_24
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_24.loop((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_24) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_24 = (jfk.function.ClosureTargetObject_24) param0;
}

DEBUG - Creation of the method completed!
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@45f8acdc->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd, String name ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(  jfk.core.JFK.getFunctionBuilder().bindDelegateFunction(delegateToAdd, name  )  );
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_3
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@451415c8->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_4 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_4.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_4.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd, String name ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_4 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.add(  jfk.core.JFK.getFunctionBuilder().bindDelegateFunction(delegateToAdd, name  )  );
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_3
INFO - Loading XML bean definitions from class path resource [spring.xml]
DEBUG - Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
DEBUG - Loading schema mappings from [META-INF/spring.schemas]
DEBUG - Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd}
DEBUG - Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.0.xsd
DEBUG - Loading bean definitions
DEBUG - Creating shared instance of singleton bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateManager'
DEBUG - Eagerly caching bean 'IDelegateManager' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IDelegateManager'
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_1
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@491cc367->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_2 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_2.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_2.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd, String name ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_2 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.add(  jfk.core.JFK.getFunctionBuilder().bindDelegateFunction(delegateToAdd, name  )  );
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_2 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_2.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_2.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_1
DEBUG - Creating instance of bean 'IDelegateConnector'
DEBUG - Finished creating instance of bean 'IDelegateConnector'
DEBUG - The new subclass will have the name jfk.test.EventGenerator_impl_3
DEBUG - Analyzing the connection notifyEvent -> jfk.test.EventConsumer@29a220e6->consumeEvent
DEBUG - Injecting the private reference to the target object _jfk_test_EventConsumer
DEBUG - Generated method code

public  void  notifyEvent(java.lang.String param0){
	 ((jfk.test.EventConsumer)this.__targetMap_.get("_jfk_test_EventConsumer")).consumeEvent((java.lang.String)  param0);


	 try{
		if( this._jfk_test_EventGenerator_privateFunctionList_4 != null )
			for(int i = 0; i < _jfk_test_EventGenerator_privateFunctionList_4.size(); i++)
				 ((jfk.function.IFunction) _jfk_test_EventGenerator_privateFunctionList_4.get(i) ).executeCall( new Object[]{(java.lang.String)  param0} );

	}catch(Exception e){ }

 
}

DEBUG - Generated setter method
public void _setPrivateTarget( String key, jfk.function.delegates.IDelegate delegate){
	 if( this.__targetMap_ == null )
		 this. __targetMap_ = new java.util.HashMap();
	 this.__targetMap_.put(key,delegate);
}

DEBUG - Creating the add delegate method
public boolean addDelegate( jfk.function.delegates.IDelegate delegateToAdd, String name ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 this._jfk_test_EventGenerator_privateFunctionList_4 = new java.util.LinkedList();

	if( ! this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToAdd) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.add(  jfk.core.JFK.getFunctionBuilder().bindDelegateFunction(delegateToAdd, name  )  );
		 return true;
	}
	else return false;
}

DEBUG - Creating the remove delegate method
public boolean removeDelegate( jfk.function.delegates.IDelegate delegateToRemove ){
	if( this._jfk_test_EventGenerator_privateFunctionList_4 == null)
		 return false;

	if(  this._jfk_test_EventGenerator_privateFunctionList_4.contains(delegateToRemove) ){
		this._jfk_test_EventGenerator_privateFunctionList_4.remove(delegateToRemove);
		 return true;
	}
	else return false;
}

DEBUG - Defining bytecode for class jfk.test.EventGenerator_impl_3
DEBUG - Creating shared instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionBuilder'
DEBUG - Eagerly caching bean 'IFunctionBuilder' to allow for resolving potential circular references
DEBUG - Finished creating instance of bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_13
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_hello_14
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_test_DummyClass.aMethodThatReturnsAString();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_double_15
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Double") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Double.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Double)  this._jfk_test_DummyClass.doubleValue((java.lang.Double)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string2_16
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeStringInteger((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Creating instance of bean 'IFunctionClassDefiner'
DEBUG - Finished creating instance of bean 'IFunctionClassDefiner'
DEBUG - The new function class name is DummyClass_string_17
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_test_DummyClass
DEBUG - Implementing the IFunction method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_test_DummyClass.composeString((java.lang.Integer)param0[0]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.test.DummyClass) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_test_DummyClass = (jfk.test.DummyClass) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Returning cached instance of singleton bean 'IFunctionBuilder'
DEBUG - Creating instance of bean 'IClosureBuilder'
DEBUG - Finished creating instance of bean 'IClosureBuilder'
DEBUG - Compiling the closure method code

DEBUG - public java.lang.String hello(){ System.out.println("Hello Closure World"); return "Hello Closure World!"; }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_18
DEBUG - The new closure class name is Closure_19
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_18
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	return (java.lang.String)  this._jfk_function_ClosureTargetObject_18.hello();
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_18) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_18 = (jfk.function.ClosureTargetObject_18) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG -  public void hello2(){ System.out.println("*** Hello from a void method");}
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_20
DEBUG - The new closure class name is Closure_21
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_20
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	
	 this._jfk_function_ClosureTargetObject_20.hello2();
	 return null;

}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_20) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_20 = (jfk.function.ClosureTargetObject_20) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public String concat(String s, Integer i){ return s + i.intValue(); }
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_22
DEBUG - The new closure class name is Closure_23
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_22
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 2)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 2 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.String") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.String.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	if( ! param0[1].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[1] != null ? param0[1].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.String)  this._jfk_function_ClosureTargetObject_22.concat((java.lang.String)param0[0], (java.lang.Integer)param0[1]);
}

DEBUG - Creation of the method completed!
DEBUG - Generated setter method 
 public void setTargetObject(java.lang.Object  param0) throws jfk.function.exception.TargetBindException
{
	 if( param0 == null || (! ( param0 instanceof jfk.function.ClosureTargetObject_22) ) )
		throw new jfk.function.exception.TargetBindException("The binding object is not of the right type!");

 this._jfk_function_ClosureTargetObject_22 = (jfk.function.ClosureTargetObject_22) param0;
}

DEBUG - Creation of the method completed!
DEBUG - Compiling the closure method code

DEBUG - public Integer loop( Integer ir ){ for(int i =0; i< ir.intValue(); i++) System.out.println("Interaction " + i); return ir; } 
DEBUG - Closure target object built: class jfk.function.ClosureTargetObject_24
DEBUG - The new closure class name is Closure_25
DEBUG - Creating a new empty constructor
DEBUG - The private reference to the target object will be _jfk_function_ClosureTargetObject_24
DEBUG - Implementing the IClosure method executeCall
DEBUG - Generated method body:

DEBUG - public java.lang.Object executeCall(java.lang.Object[] param0) throws jfk.function.exception.BadArityException, jfk.function.exception.BadParameterTypeException
{
	 if( param0 == null || param0.length != 1)
		{
			jfk.function.exception.BadArityException bae = new jfk.function.exception.BadArityException("Bad arity!");


			bae.setRequiredArity( 1 );
			bae.setSuppliedArity( (param0 != null ? param0.length : 0 ) );
			throw bae; 
		}

	if( ! param0[0].getClass().getName().equals( "java.lang.Integer") )
		{
			jfk.function.exception.BadParameterTypeException bpe = new jfk.function.exception.BadParameterTypeException("Bad parameter type!");


			bpe.setRequiredType( java.lang.Integer.class );
			bpe.setSuppliedType( (param0[0] != null ? param0[0].getClass() : java.lang.Void.class) );
			throw bpe; 
		}

	return (java.lang.Integer)  this._jfk_function_ClosureTargetObject_24.loop((java.lang.Integer)param0[0]);
}

